package database

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
	"github.com/canonical/microcluster/cluster"
)

var _ = api.ServerEnvironment{}

var diskPathObjects = cluster.RegisterStmt(`
SELECT diskpaths.id, internal_cluster_members.name AS member, diskpaths.path
  FROM diskpaths
  JOIN internal_cluster_members ON diskpaths.member_id = internal_cluster_members.id
  ORDER BY internal_cluster_members.id, diskpaths.path
`)

var diskPathObjectsByMember = cluster.RegisterStmt(`
SELECT diskpaths.id, internal_cluster_members.name AS member, diskpaths.path
  FROM diskpaths
  JOIN internal_cluster_members ON diskpaths.member_id = internal_cluster_members.id
  WHERE ( member = ? )
  ORDER BY internal_cluster_members.id, diskpaths.path
`)

var diskPathObjectsByMemberAndPath = cluster.RegisterStmt(`
SELECT diskpaths.id, internal_cluster_members.name AS member, diskpaths.path
  FROM diskpaths
  JOIN internal_cluster_members ON diskpaths.member_id = internal_cluster_members.id
  WHERE ( member = ? AND diskpaths.path = ? )
  ORDER BY internal_cluster_members.id, diskpaths.path
`)

var diskPathID = cluster.RegisterStmt(`
SELECT diskpaths.id FROM diskpaths
  JOIN internal_cluster_members ON diskpaths.member_id = internal_cluster_members.id
  WHERE internal_cluster_members.name = ? AND diskpaths.path = ?
`)

var diskPathCreate = cluster.RegisterStmt(`
INSERT INTO diskpaths (member_id, path)
  VALUES ((SELECT internal_cluster_members.id FROM internal_cluster_members WHERE internal_cluster_members.name = ?), ?)
`)

var diskPathDeleteByMember = cluster.RegisterStmt(`
DELETE FROM diskpaths WHERE member_id = (SELECT internal_cluster_members.id FROM internal_cluster_members WHERE internal_cluster_members.name = ?)
`)

var diskPathDeleteByMemberAndPath = cluster.RegisterStmt(`
DELETE FROM diskpaths WHERE member_id = (SELECT internal_cluster_members.id FROM internal_cluster_members WHERE internal_cluster_members.name = ?) AND path = ?
`)

var diskPathUpdate = cluster.RegisterStmt(`
UPDATE diskpaths
  SET member_id = (SELECT internal_cluster_members.id FROM internal_cluster_members WHERE internal_cluster_members.name = ?), path = ?
 WHERE id = ?
`)

// GetDiskPaths returns all available DiskPaths.
// generator: DiskPath GetMany
func GetDiskPaths(ctx context.Context, tx *sql.Tx, filters ...DiskPathFilter) ([]DiskPath, error) {
	var err error

	// Result slice.
	objects := make([]DiskPath, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = cluster.Stmt(tx, diskPathObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"diskPathObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Member != nil && filter.Path != nil {
			args = append(args, []any{filter.Member, filter.Path}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, diskPathObjectsByMemberAndPath)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"diskPathObjectsByMemberAndPath\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(diskPathObjectsByMemberAndPath)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"diskPathObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Member != nil && filter.Path == nil {
			args = append(args, []any{filter.Member}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, diskPathObjectsByMember)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"diskPathObjectsByMember\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(diskPathObjectsByMember)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"diskPathObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Member == nil && filter.Path == nil {
			return nil, fmt.Errorf("Cannot filter on empty DiskPathFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Dest function for scanning a row.
	dest := func(scan func(dest ...any) error) error {
		d := DiskPath{}
		err := scan(&d.ID, &d.Member, &d.Path)
		if err != nil {
			return err
		}

		objects = append(objects, d)

		return nil
	}

	// Select.
	if sqlStmt != nil {
		err = query.SelectObjects(ctx, sqlStmt, dest, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		err = query.Scan(ctx, tx, queryStr, dest, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"disks_paths\" table: %w", err)
	}

	return objects, nil
}

// GetDiskPath returns the DiskPath with the given key.
// generator: DiskPath GetOne
func GetDiskPath(ctx context.Context, tx *sql.Tx, member string, path string) (*DiskPath, error) {
	filter := DiskPathFilter{}
	filter.Member = &member
	filter.Path = &path

	objects, err := GetDiskPaths(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"disks_paths\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "DiskPath not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"disks_paths\" entry matches")
	}
}

// GetDiskPathID return the ID of the DiskPath with the given key.
// generator: DiskPath ID
func GetDiskPathID(ctx context.Context, tx *sql.Tx, member string, path string) (int64, error) {
	stmt, err := cluster.Stmt(tx, diskPathID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"diskPathID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, member, path)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "DiskPath not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"disks_paths\" ID: %w", err)
	}

	return id, nil
}

// DiskPathExists checks if a DiskPath with the given key exists.
// generator: DiskPath Exists
func DiskPathExists(ctx context.Context, tx *sql.Tx, member string, path string) (bool, error) {
	_, err := GetDiskPathID(ctx, tx, member, path)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateDiskPath adds a new DiskPath to the database.
// generator: DiskPath Create
func CreateDiskPath(ctx context.Context, tx *sql.Tx, object DiskPath) (int64, error) {
	// Check if a DiskPath with the same key exists.
	exists, err := DiskPathExists(ctx, tx, object.Member, object.Path)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"disks_paths\" entry already exists")
	}

	args := make([]any, 2)

	// Populate the statement arguments.
	args[0] = object.Member
	args[1] = object.Path

	// Prepared statement to use.
	stmt, err := cluster.Stmt(tx, diskPathCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"diskPathCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"disks_paths\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"disks_paths\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteDiskPath deletes the DiskPath matching the given key parameters.
// generator: DiskPath DeleteOne-by-Member-and-Path
func DeleteDiskPath(ctx context.Context, tx *sql.Tx, member string, path string) error {
	stmt, err := cluster.Stmt(tx, diskPathDeleteByMemberAndPath)
	if err != nil {
		return fmt.Errorf("Failed to get \"diskPathDeleteByMemberAndPath\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(member, path)
	if err != nil {
		return fmt.Errorf("Delete \"disks_paths\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "DiskPath not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d DiskPath rows instead of 1", n)
	}

	return nil
}

// DeleteDiskPaths deletes the DiskPath matching the given key parameters.
// generator: DiskPath DeleteMany-by-Member
func DeleteDiskPaths(ctx context.Context, tx *sql.Tx, member string) error {
	stmt, err := cluster.Stmt(tx, diskPathDeleteByMember)
	if err != nil {
		return fmt.Errorf("Failed to get \"diskPathDeleteByMember\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(member)
	if err != nil {
		return fmt.Errorf("Delete \"disks_paths\": %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// UpdateDiskPath updates the DiskPath matching the given key parameters.
// generator: DiskPath Update
func UpdateDiskPath(ctx context.Context, tx *sql.Tx, member string, path string, object DiskPath) error {
	id, err := GetDiskPathID(ctx, tx, member, path)
	if err != nil {
		return err
	}

	stmt, err := cluster.Stmt(tx, diskPathUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"diskPathUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Member, object.Path, id)
	if err != nil {
		return fmt.Errorf("Update \"disks_paths\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
