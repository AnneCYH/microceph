# .github/workflows/check-microceph-channel.yml
name: Check latest MicroCeph channel

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main  # ← change if your default branch has a different name

  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # Optional: runs nightly at 02:00 UTC

jobs:
  microceph-channel:
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Needed for commit search

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ------------------------------------------------------------
      # 1. Install the MicroCeph snap
      # ------------------------------------------------------------
      - name: Install MicroCeph snap
        run: |
          sudo snap install microceph

      # ------------------------------------------------------------
      # 2 & 3. Extract <flavour>, <version>, <commit>
      # ------------------------------------------------------------
      - name: Extract channel information
        id: snap
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Run `snap info microceph`
            const info = execSync('snap info microceph', { encoding: 'utf-8' });
            const lines = info.split('\n');

            // Find the "channels:" header (ignoring indentation)
            const headerIdx = lines.findIndex(l => l.trim().startsWith('channels:'));
            if (headerIdx === -1) {
              core.setFailed('Could not find "channels:" in snap info output');
              return;
            }

            // Get the first non-empty channel line after the header
            const channelRaw = lines.slice(headerIdx + 1)
                                    .find(l => l.includes('/stable:'));

            if (!channelRaw) {
              core.setFailed('Could not find a "/stable:" channel line');
              return;
            }

            core.info(`Channel line: "${channelRaw}"`);

            // Parse flavour, version, and commit ID
            const m = channelRaw.match(
              /^\s*([^/]+)\/stable:\s+([^+\s]+)\+snap([a-f0-9]+)\s/
            );
            if (!m) {
              core.setFailed('Failed to parse channel line');
              return;
            }

            const [, flavour, version, commit] = m;
            core.setOutput('flavour', flavour);
            core.setOutput('version', version);
            core.setOutput('commit', commit);

            core.info(`flavour=${flavour}`);
            core.info(`version=${version}`);
            core.info(`commit=${commit}`);

      # ------------------------------------------------------------
      # 4. Verify commit exists in the repo and print commit message first line
      # ------------------------------------------------------------
      - name: Verify commit exists
        uses: actions/github-script@v7
        with:
          script: |
            const target = '${{ steps.snap.outputs.commit }}'.slice(0, 7);  // 7-char prefix
            core.info(`Looking for a commit starting with "${target}" …`);

            const commits = await github.paginate(
              github.rest.repos.listCommits,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              }
            );

            const hit = commits.find(c => c.sha.startsWith(target));

            if (hit) {
              core.info(`✅ Found commit: ${hit.sha} — ${hit.html_url}`);

              // Print first line of the commit message
              const firstLine = hit.commit.message.split('\n')[0];
              core.info(`Commit message first line: "${firstLine}"`);
            } else {
              core.setFailed(`❌ No commit starting with "${target}" found in the repository`);
            }
