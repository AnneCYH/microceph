# .github/workflows/check-microceph-channel.yml
name: Check latest MicroCeph channel

on:
  # Runs a single time when the PR is *opened* (not on later pushes)
  pull_request:
    types: [opened]
    # base branch pattern – change if your default branch isn’t `main`
    branches:
      - main

  # Still allow manual and nightly runs if you keep these
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  microceph-channel:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    # ------------------------------------------------------------
    # 1. Install the snap
    # ------------------------------------------------------------
    - name: Install MicroCeph snap
      run: |
        sudo snap install microceph

    # ------------------------------------------------------------
    # 2 & 3. Extract <flavour>, <version>, <commit>
    # ------------------------------------------------------------
    - name: Extract channel information
      id: snap
      uses: actions/github-script@v7
      with:
        script: |
          const core       = require('@actions/core');
          const {execSync} = require('child_process');

          const info = execSync('snap info microceph', {encoding: 'utf-8'});
          const lines = info.split('\n');
          const headerIdx = lines.findIndex(l => l.startsWith('channels:'));
          const channelRaw = lines.slice(headerIdx + 1).find(l => l.trim() !== '');
          core.info(`Channel line: "${channelRaw}"`);

          const m = channelRaw.match(
            /^\s*([^/]+)\/stable:\s+(\d+\.\d+\.\d+)\+snap([a-f0-9]+)\s/
          );
          if (!m) core.setFailed('Failed to parse channel line');

          const [, flavour, version, commit] = m;
          core.setOutput('flavour', flavour);
          core.setOutput('version', version);
          core.setOutput('commit',  commit);

          core.info(`flavour=${flavour}`);
          core.info(`version=${version}`);
          core.info(`commit=${commit}`);

    # ------------------------------------------------------------
    # 4. Verify commit exists in the repo
    # ------------------------------------------------------------
    - name: Verify commit exists
      uses: actions/github-script@v7
      with:
        script: |
          const core   = require('@actions/core');
          const github = require('@actions/github');

          const shortSHA = '${{ steps.snap.outputs.commit }}'.substring(0, 9);
          core.info(`Searching for commit starting with "${shortSHA}" …`);

          try {
            const {data} = await github.rest.repos.getCommit({
              owner: github.context.repo.owner,
              repo:  github.context.repo.repo,
              ref:   shortSHA
            });
            core.info(`✅ Commit found: ${data.html_url}`);
          } catch {
            core.setFailed(`❌ No commit with prefix "${shortSHA}" found`);
          }
